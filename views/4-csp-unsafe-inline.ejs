<!-- @format -->

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>CSP - Unsafe Inline</title>

        <!--  加上特定 Domain 之後，就可以載入該 Domain 資源  -->
        <script src="/js/index.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>

        <!-- 僅設定 scirpt-src 因此 inline-style 仍然可以正常執行 -->
        <style>
            body {
                background-color: #f9d6d6;
            }
            img {
                width: 300px;
            }
            button,
            a {
                border: 1px solid #000;
                padding: 5px 10px;
                border-radius: 5px;
                color: #000;
                text-decoration: none;
                height: 30px;
                font-size: 12px;
            }

            .next {
                position: fixed;
                bottom: 10px;
                right: 10px;
                line-height: 30px;
            }
        </style>
    </head>
    <body>
        <h4>Self + unsafe-inline</h4>
        <!-- 僅設定 scirpt-src 因此不同 domain 的圖片資源仍可正常載入 -->
        <img
            src="https://images.pexels.com/photos/139764/pexels-photo-139764.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
            alt=""
        />

        <p>JS:</p>
        <ul>
            <li>header response 加上了 'unsafe-inline' 因此相關的 inline-script 便可以開始執行</li>
            <li>可以被執行的有 onClick, onMouseover ...etc event、script、javascript:</li>
            <li>不可以被執行的有 eval()</li>
            <li>
                但 unsafe 顧名思義就是不安全的意思，畢竟這些就能夠允許 inline-script 跟 inline-style
                執行，畢竟瀏覽器也無法判斷到底是合法還是XXS 所植入的 script，因此 w3c
                也不建議使用這些關鍵字。 <br />W3C:
                https://www.w3.org/TR/2024/WD-CSP3-20241014/#csp-directives > In either case,
                developers SHOULD NOT include either 'unsafe-inline', or data: as valid sources in
                their policies. Both enable XSS attacks by allowing code to be included directly in
                the document itself; they are best avoided completely.
            </li>
        </ul>
        <button onclick="alert('clicked!')">Click me (Use Onclick)</button>
        <button id="test">Click me (Use addEventListener)</button>
        <a href="javascript:alert('Hello World!')">Link (Use javascript:)</a>
        <script>
            console.log("from lodash", _.isEmpty({}));

            const buttonElement = document.getElementById("test");
            buttonElement.addEventListener("click", () => {
                alert("from <script> addEventListener");
            });

            setTimeout(() => {
                console.log("setTimeout");
            }, 500);

            /* unsafe-inline 的特性是所有 inline-script 皆可執行，唯獨 eval 不行 */
            console.log("from eval", eval("2 + 2"));
        </script>

        <a href="/csp-unsafe-eval" class="next">Next Setting - unsafe-eval</a>
    </body>
</html>
